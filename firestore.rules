/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model for a portfolio website.
 *
 * Data Structure:
 * - /about/{aboutId}: Stores the 'About' section content.
 * - /projects/{projectId}: Stores project documents.
 * - /resumeEntries/{resumeEntryId}: Stores resume entries.
 * - /contactMessages/{contactMessageId}: Stores contact messages.
 * - /roles_admin/{userId}: Presence-based role assignment for admins.
 *
 * Key Security Decisions:
 * - Only authenticated admins can create, update, or delete About, Projects, and ResumeEntry documents.
 * - Only authenticated admins can list or read ContactMessage documents.
 * - Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 * - Listing of the /roles_admin collection is denied.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by checking for the existence of a document in the `/roles_admin/{userId}` collection, allowing for simple `exists()` checks in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants or denies admin privileges based on document existence in /roles_admin/{userId}.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Allows admins to manage the 'About' document.
     * @path /about/{aboutId}
     * @allow (get) Authenticated user.
     * @allow (list) Authenticated user.
     * @allow (create) Authenticated admin creating the about document.
     * @allow (update) Authenticated admin updating the about document.
     * @allow (delete) Authenticated admin deleting the about document.
     * @deny (create) Non-admin creating the about document.
     * @deny (update) Non-admin updating the about document.
     * @deny (delete) Non-admin deleting the about document.
     * @principle Enforces admin-only access for modifying the 'About' content.
     */
    match /about/{aboutId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage project documents.
     * @path /projects/{projectId}
     * @allow (get) Authenticated user.
     * @allow (list) Authenticated user.
     * @allow (create) Authenticated admin creating a project.
     * @allow (update) Authenticated admin updating a project.
     * @allow (delete) Authenticated admin deleting a project.
     * @deny (create) Non-admin creating a project.
     * @deny (update) Non-admin updating a project.
     * @deny (delete) Non-admin deleting a project.
     * @principle Enforces admin-only access for managing project content.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to manage resume entry documents.
     * @path /resumeEntries/{resumeEntryId}
     * @allow (get) Authenticated user.
     * @allow (list) Authenticated user.
     * @allow (create) Authenticated admin creating a resume entry.
     * @allow (update) Authenticated admin updating a resume entry.
     * @allow (delete) Authenticated admin deleting a resume entry.
     * @deny (create) Non-admin creating a resume entry.
     * @deny (update) Non-admin updating a resume entry.
     * @deny (delete) Non-admin deleting a resume entry.
     * @principle Enforces admin-only access for managing resume entries.
     */
    match /resumeEntries/{resumeEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Allows admins to list and read contact messages.
     * @path /contactMessages/{contactMessageId}
     * @allow (get) Authenticated admin reading a contact message.
     * @allow (list) Authenticated admin listing contact messages.
     * @deny (get) Non-admin reading a contact message.
     * @deny (list) Non-admin listing contact messages.
     * @deny (create) Anyone creating a contact message.
     * @deny (update) Anyone updating a contact message.
     * @deny (delete) Anyone deleting a contact message.
     * @principle Enforces admin-only access for viewing contact messages.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages admin role assignment based on document existence.
     * @path /roles_admin/{userId}
     * @allow (create) Authenticated user creating their own admin role document.
     * @allow (get) Authenticated admin reading a role.
     * @allow (update) Authenticated admin updating a role.
     * @allow (delete) Authenticated admin deleting a role.
     * @deny (create) Non-admin creating an admin role document for another user.
     * @deny (update) Non-admin updating an admin role document.
     * @deny (delete) Non-admin deleting an admin role document.
     * @principle Controls who can be assigned the admin role.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
  }
}