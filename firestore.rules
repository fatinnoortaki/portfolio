/**
 * @file Firestore Security Rules for Portfolio Website
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model. Only authenticated administrators can create, update, or delete About, Project, and ResumeEntry documents. ContactMessages can be read and listed only by administrators. Admin status is determined by the existence of a document in the /roles_admin/{userId} collection.
 *
 * Data Structure:
 * - /about/{aboutId}: Stores information about the portfolio owner.
 * - /projects/{projectId}: Stores project details.
 * - /resumeEntries/{resumeEntryId}: Stores resume entries.
 * - /contactMessages/{contactMessageId}: Stores messages from the contact form.
 * - /roles_admin/{userId}: Indicates administrator status based on document existence.
 *
 * Key Security Decisions:
 * - Strict admin-only access for content management (About, Projects, ResumeEntries).
 * - ContactMessages are readable and listable only by admins.
 * - Admin role is determined by the existence of a document in /roles_admin/{userId}. The document's content is irrelevant.
 * - Listing of ContactMessages, Projects, and ResumeEntries is denied to non-admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return {bool} True if the user has a document in the roles_admin collection, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Checks if the document exists and the user is an admin.
     * @return {bool} True if the document exists and the user is an admin, false otherwise.
     */
    function isExistingAdmin() {
      return isAdmin() && resource != null;
    }

    /**
     * @description Defines read rules for the 'about' collection.
     * @path /about/{aboutId}
     * @allow (get) Authenticated user can read the about document.
     * @deny (list) Non-authenticated user attempts to list about documents.
     * @principle Public read access with admin-only writes.
     */
    match /about/{aboutId} {
      allow get: if true;
      allow list: if false;

      /**
       * @description Defines write rules for the 'about' collection.
       * @path /about/{aboutId}
       * @allow (create) Admin user attempts to create the about document.
       * @deny (update) Non-admin user attempts to update the about document.
       * @deny (delete) Non-admin user attempts to delete the about document.
       * @principle Enforces admin-only access for writes.
       */
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Defines read rules for the 'projects' collection.
     * @path /projects/{projectId}
     * @allow (get) Authenticated user can read a project document.
     * @deny (list) Non-admin user attempts to list project documents.
     * @principle Public read access with admin-only writes.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if isAdmin();

      /**
       * @description Defines write rules for the 'projects' collection.
       * @path /projects/{projectId}
       * @allow (create) Admin user attempts to create a project document.
       * @deny (update) Non-admin user attempts to update a project document.
       * @deny (delete) Non-admin user attempts to delete a project document.
       * @principle Enforces admin-only access for writes.
       */
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Defines read rules for the 'resumeEntries' collection.
     * @path /resumeEntries/{resumeEntryId}
     * @allow (get) Authenticated user can read a resume entry.
     * @deny (list) Non-admin user attempts to list resume entries.
     * @principle Public read access with admin-only writes.
     */
    match /resumeEntries/{resumeEntryId} {
      allow get: if true;
      allow list: if isAdmin();

      /**
       * @description Defines write rules for the 'resumeEntries' collection.
       * @path /resumeEntries/{resumeEntryId}
       * @allow (create) Admin user attempts to create a resume entry.
       * @deny (update) Non-admin user attempts to update a resume entry.
       * @deny (delete) Non-admin user attempts to delete a resume entry.
       * @principle Enforces admin-only access for writes.
       */
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }

    /**
     * @description Defines read rules for the 'contactMessages' collection.
     * @path /contactMessages/{contactMessageId}
     * @allow (get) Admin user can read a contact message.
     * @allow (list) Admin user can list contact messages.
     * @deny (get) Non-admin user attempts to read a contact message.
     * @deny (list) Non-admin user attempts to list contact messages.
     * @principle Restricts access to contact messages to admins only.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if isAdmin();
      allow list: if isAdmin();

      /**
       * @description Defines write rules for the 'contactMessages' collection.
       *  Contact messages are generated by users and should not be created, updated, or deleted by anyone else.
       * @path /contactMessages/{contactMessageId}
       * @deny (create) Anyone attempts to create a contact message directly.
       * @deny (update) Anyone attempts to update a contact message.
       * @deny (delete) Anyone attempts to delete a contact message.
       * @principle Denies all write operations to contact messages.
       */
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines read rules for the 'roles_admin' collection.
     * @path /roles_admin/{userId}
     * @allow (get) Any authenticated user can check if they are an admin.
     * @deny (list) Listing the roles_admin collection is not permitted.
     * @principle Restricts listing of admin roles.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;

       /**
        * @description Defines write rules for the 'roles_admin' collection.
        * @path /roles_admin/{userId}
        * @allow (create) Any autheticated user can create an admin document if they are an admin.
        * @deny (update) Non-admin user attempts to update an admin document.
        * @deny (delete) Non-admin user attempts to delete an admin document.
        * @principle Enforces admin-only access for writes.
        */
      allow create: if isAdmin();
      allow update: if isExistingAdmin();
      allow delete: if isExistingAdmin();
    }
  }
}