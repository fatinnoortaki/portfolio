/**
 * @fileOverview Firestore Security Rules for a personal portfolio website.
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control model, primarily using an "admin" role for modifying content.
 * Data is segregated into collections based on content type: About, Projects, ResumeEntries, ContactMessages, and Admin Roles.
 * The rules are designed for clarity and prevent common pitfalls like accidental data exposure or modification.
 *
 * Data Structure:
 * - /about/{aboutId}: Contains information about the portfolio owner.  `aboutId` is expected to be a constant string (e.g., "main").
 * - /projects/{projectId}: Stores project details.
 * - /resumeEntries/{resumeEntryId}: Stores resume entries.
 * - /contactMessages/{contactMessageId}: Stores messages submitted via the contact form.
 * - /roles_admin/{userId}: Used for role assignment.  If a document exists for a user, they are an admin.
 *
 * Key Security Decisions:
 * - Only authenticated users can be assigned the admin role via document creation in `roles_admin`.
 * - Only admins can create, update, or delete About, Project, and ResumeEntry documents.
 * - Only admins can list or get ContactMessage documents.
 * - Regular users have no write access to any data except through the implicit "ContactMessage" submission process.
 * - Listing of ContactMessages is explicitly disallowed for non-admins.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in the `/roles_admin/{userId}` collection. This avoids more complex queries or custom claims.
 *
 * Structural Segregation:
 * - ContactMessages are stored in a separate collection to isolate them and apply different security rules (admin-only access).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is an admin based on the presence of a document in the roles_admin collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for the /about/{aboutId} collection.
     * @path /about/{aboutId}
     * @allow (create, update, delete) if isAdmin() - Allows admins to modify the about document.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from modifying the about document.
     * @allow get, list: if true; - Allows anyone to read the about document.
     * @principle Enforces admin-only writes for the About collection.
     */
    match /about/{aboutId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /projects/{projectId} collection.
     * @path /projects/{projectId}
     * @allow (create, update, delete) if isAdmin() - Allows admins to modify project documents.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from modifying project documents.
     * @allow get, list: if true; - Allows anyone to read project documents.
     * @principle Enforces admin-only writes for the Projects collection.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /resumeEntries/{resumeEntryId} collection.
     * @path /resumeEntries/{resumeEntryId}
     * @allow (create, update, delete) if isAdmin() - Allows admins to modify resume entry documents.
     * @deny (create, update, delete) if !isAdmin() - Denies non-admins from modifying resume entry documents.
     * @allow get, list: if true; - Allows anyone to read resume entry documents.
     * @principle Enforces admin-only writes for the ResumeEntries collection.
     */
    match /resumeEntries/{resumeEntryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Rule for the /contactMessages/{contactMessageId} collection.
     * @path /contactMessages/{contactMessageId}
     * @allow get, list: if isAdmin() - Allows admins to read contact messages.
     * @deny get, list: if !isAdmin() - Denies non-admins from reading contact messages.
     * @allow create: if true; - Allows anyone to create a contact message.
     * @deny update, delete: if true; - Denies anyone from updating or deleting contact messages.
     * @principle Restricts read access to admins for ContactMessages, allows open creation.
     */
    match /contactMessages/{contactMessageId} {
      allow get, list: if isAdmin();
      allow create: if true;
      allow update, delete: if false;
    }

       /**
        * @description Rule for the /roles_admin/{userId} collection.  Admin role assignment.
        * @path /roles_admin/{userId}
        * @allow create: if isSignedIn() && request.auth.uid == userId; - Allows a signed-in user to create their admin role.
        * @deny create: if !isSignedIn() || request.auth.uid != userId; - Denies creating an admin role if not signed in or the user ID doesn't match.
        * @allow get: if request.auth.uid == userId; - Allows a user to read their own admin role document.
        * @deny get: if request.auth.uid != userId; - Denies reading another user's admin role document.
        * @allow delete: if isAdmin(); - Allows an admin to delete any user's role document
        * @deny delete: if !isAdmin(); - Denies a non-admin to delete any user's role document
        * @deny update: if true; - Updating admin roles is not permitted.
        * @deny list: if true; - Listing admin roles is not permitted.
        * @principle Restricts admin role creation to the authenticated user, and requires authentication to view an admin role.
        */
       match /roles_admin/{userId} {
            allow get: if request.auth.uid == userId;
            allow list: if false;
            allow create: if isSignedIn() && request.auth.uid == userId;
            allow update: if false;
            allow delete: if isAdmin();
       }
  }
}