rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants or denies access based on whether the user is an admin.
     * @param {string} userId - The user ID to check for admin status.
     * @returns {bool} - True if the user is an admin, false otherwise.
     */
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/roles_admin/$(userId));
    }

    /**
     * @description Checks if the user is signed in.
     * @returns {bool} - True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Determines if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {bool} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @returns {bool} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Security rules for the 'about' collection.
     * @path /about/{aboutId}
     * @allow (create) - An admin user can create a document in the 'about' collection.
     * @allow (update) - An admin user can update a document in the 'about' collection.
     * @allow (delete) - An admin user can delete a document in the 'about' collection.
     * @deny (create) - A non-admin user cannot create a document in the 'about' collection.
     * @deny (update) - A non-admin user cannot update a document in the 'about' collection.
     * @deny (delete) - A non-admin user cannot delete a document in the 'about' collection.
     * @principle Enforces role-based access control; only admins can modify 'about' documents.
     */
    match /about/{aboutId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin(request.auth.uid);
      allow update: if isSignedIn() && isAdmin(request.auth.uid);
      allow delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    /**
     * @description Security rules for the 'projects' collection.
     * @path /projects/{projectId}
     * @allow (create) - An admin user can create a document in the 'projects' collection.
     * @allow (update) - An admin user can update a document in the 'projects' collection.
     * @allow (delete) - An admin user can delete a document in the 'projects' collection.
     * @deny (create) - A non-admin user cannot create a document in the 'projects' collection.
     * @deny (update) - A non-admin user cannot update a document in the 'projects' collection.
     * @deny (delete) - A non-admin user cannot delete a document in the 'projects' collection.
     * @principle Enforces role-based access control; only admins can modify 'projects' documents.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin(request.auth.uid);
      allow update: if isSignedIn() && isAdmin(request.auth.uid);
      allow delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    /**
     * @description Security rules for the 'resumeEntries' collection.
     * @path /resumeEntries/{resumeEntryId}
     * @allow (create) - An admin user can create a document in the 'resumeEntries' collection.
     * @allow (update) - An admin user can update a document in the 'resumeEntries' collection.
     * @allow (delete) - An admin user can delete a document in the 'resumeEntries' collection.
     * @deny (create) - A non-admin user cannot create a document in the 'resumeEntries' collection.
     * @deny (update) - A non-admin user cannot update a document in the 'resumeEntries' collection.
     * @deny (delete) - A non-admin user cannot delete a document in the 'resumeEntries' collection.
     * @principle Enforces role-based access control; only admins can modify 'resumeEntries' documents.
     */
    match /resumeEntries/{resumeEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin(request.auth.uid);
      allow update: if isSignedIn() && isAdmin(request.auth.uid);
      allow delete: if isSignedIn() && isAdmin(request.auth.uid);
    }

    /**
     * @description Security rules for the 'contactMessages' collection.
     * @path /contactMessages/{contactMessageId}
     * @allow (get) - An admin user can get a document in the 'contactMessages' collection.
     * @allow (list) - An admin user can list documents in the 'contactMessages' collection.
     * @deny (get) - A non-admin user cannot get a document in the 'contactMessages' collection.
     * @deny (list) - A non-admin user cannot list documents in the 'contactMessages' collection.
     * @allow (create) - Any signed in user can create a contact message.
     * @deny (update) - No one can update a contact message.
     * @deny (delete) - No one can delete a contact message.
     * @principle Enforces role-based access control; only admins can list or read contact messages.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if isSignedIn() && isAdmin(request.auth.uid);
      allow list: if isSignedIn() && isAdmin(request.auth.uid);
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Security rules for the 'roles_admin' collection.  Determines admin status.
     * @path /roles_admin/{userId}
     * @allow (get) - Only the user can get his/her role.
     * @allow (list) - No one can list all users.
     * @allow (create) - Only the user can create his/her role.
     * @allow (update) - Only the user can update his/her role.
     * @allow (delete) - Only the user can delete his/her role.
     */
    match /roles_admin/{userId} {
        allow get: if isSignedIn() && isOwner(userId);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isOwner(userId);
        allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}