/**
 * @file Overview
 * This ruleset enforces a role-based access control model for a portfolio website's Firestore database.
 * Only users designated as admins can create, update, or delete About, Project, and ResumeEntry documents.
 * ContactMessages can be read and listed only by admins.
 *
 * Data Structure:
 * - /about/{aboutId}: Stores the 'About' section content.
 * - /projects/{projectId}: Stores project documents.
 * - /resumeEntries/{resumeEntryId}: Stores resume entries.
 * - /contactMessages/{contactMessageId}: Stores contact messages.
 * - /roles_admin/{userId}: Indicates admin status based on document presence.
 *
 * Key Security Decisions:
 * - Admin Role: Determined by the presence of a document in the /roles_admin/{userId} collection.
 * - No User Listing: Listing of /users is denied.
 * - Read-Only Collections: There are no publicly readable collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin based on the presence of a document in the `/roles_admin/{userId}` collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Rule for the /about collection.
     * @path /about/{aboutId}
     * @allow (update) If the user is an admin.
     * @deny (update) If the user is not an admin.
     * @principle Only admins can modify the 'About' section content.
     */
    match /about/{aboutId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for the /projects collection.
     * @path /projects/{projectId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Only admins can create, update, or delete projects.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for the /resumeEntries collection.
     * @path /resumeEntries/{resumeEntryId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Only admins can create, update, or delete resume entries.
     */
    match /resumeEntries/{resumeEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rule for the /contactMessages collection.
     * @path /contactMessages/{contactMessageId}
     * @allow (get) If the user is an admin.
     * @deny (get) If the user is not an admin.
     * @principle Only admins can list or read contact messages.
     */
    match /contactMessages/{contactMessageId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Rule for the /roles_admin collection. Only admins can create documents in this collection.
      * If a document exists for a user ID, that user is an admin.
      * @path /roles_admin/{userId}
      */
    match /roles_admin/{userId} {
        allow get: if false;
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if false;
        allow delete: if isSignedIn() && request.auth.uid == userId;
    }
  }
}