/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, restricting access to all data
 * unless explicitly allowed.  Administrative access is controlled via a dedicated
 * "roles_admin" collection.
 *
 * Data Structure:
 * The database is organized into top-level collections for 'about', 'projects',
 * 'resume_entries', 'contact_messages', and 'roles_admin'.
 *
 * Key Security Decisions:
 * - Admin users are identified by their presence in the `/roles_admin/{userId}` collection.
 * - Contact messages can be created by anyone, but only admins can read them.
 * - All other collections are read/write restricted to admin users only.
 * - No data validation is performed beyond checking basic authorization.
 *
 * Denormalization for Authorization:
 * The presence of a document in the `/roles_admin/{userId}` collection is used to
 * determine if a user has admin privileges. This avoids the need for complex
 * role-based authentication systems and costly `get()` calls.
 *
 * Structural Segregation:
 * Different data types (portfolio projects, contact messages, etc.) are stored
 * in separate collections to allow for fine-grained access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to read, create, update, and delete About documents.
     * @path /about/{aboutId}
     * @allow (read, create, update, delete) if user is an admin.
     * @deny (read, create, update, delete) if user is not an admin.
     * @principle Restricts access to the 'about' collection to admin users only.
     */
    match /about/{aboutId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read, create, update, and delete Project documents.
     * @path /projects/{projectId}
     * @allow (read, create, update, delete) if user is an admin.
     * @deny (read, create, update, delete) if user is not an admin.
     * @principle Restricts access to the 'projects' collection to admin users only.
     */
    match /projects/{projectId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to read, create, update, and delete ResumeEntry documents.
     * @path /resume_entries/{resumeEntryId}
     * @allow (read, create, update, delete) if user is an admin.
     * @deny (read, create, update, delete) if user is not an admin.
     * @principle Restricts access to the 'resume_entries' collection to admin users only.
     */
    match /resume_entries/{resumeEntryId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to create ContactMessage documents, but only admins can read, update, or delete them.
     * @path /contact_messages/{contactMessageId}
     * @allow (create) if user is signed in or anonymous.
     * @allow (read, update, delete) if user is an admin.
     * @deny (read, update, delete) if user is not an admin.
     * @principle Allows public submission of contact messages while restricting access to admin users.
     */
    match /contact_messages/{contactMessageId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to create their admin role via a document with their UID. Only admins can read, update, or delete the documents in this collection.
     * @path /roles_admin/{userId}
     * @allow (create) if the user's UID matches the document ID.
     * @allow (read, update, delete) if user is an admin.
     * @deny (read, update, delete) if user is not an admin.
     * @principle This collection determines what users are admins of this application
     */
    match /roles_admin/{userId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if request.auth.uid == userId;
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     * @principle Uses Firebase Authentication to verify user identity.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying the presence of a document in the /roles_admin/{userId} collection.
     * @return True if the user is an admin, false otherwise.
     * @principle Uses a dedicated collection to manage admin roles.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

  }
}