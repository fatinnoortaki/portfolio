{
  "entities": {
    "About": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "About",
      "type": "object",
      "description": "Represents the 'About' section content on the portfolio website.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the About entity."
        },
        "bio": {
          "type": "string",
          "description": "A detailed biography of the individual."
        },
        "photoUrl": {
          "type": "string",
          "description": "URL of the individual's photograph.",
          "format": "uri"
        },
        "funFacts": {
          "type": "array",
          "description": "An array of fun facts about the individual.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "bio",
        "photoUrl",
        "funFacts"
      ]
    },
    "Project": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Project",
      "type": "object",
      "description": "Represents a project showcased in the portfolio.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Project entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the project."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the project."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the project's image.",
          "format": "uri"
        },
        "techStack": {
          "type": "array",
          "description": "An array of technologies used in the project.",
          "items": {
            "type": "string"
          }
        },
        "link": {
          "type": "string",
          "description": "URL to the project's live demo or repository.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "imageUrl",
        "techStack",
        "link"
      ]
    },
    "ResumeEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ResumeEntry",
      "type": "object",
      "description": "Represents a single entry in the resume (experience or education).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ResumeEntry entity."
        },
        "type": {
          "type": "string",
          "description": "Type of resume entry (e.g., 'experience', 'education')."
        },
        "title": {
          "type": "string",
          "description": "Title of the entry (e.g., job title, degree)."
        },
        "description": {
          "type": "string",
          "description": "Description of the entry (e.g., responsibilities, coursework)."
        },
        "startDate": {
          "type": "string",
          "description": "Start date of the entry.",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "description": "End date of the entry (or 'Present').",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "type",
        "title",
        "description",
        "startDate"
      ]
    },
    "ContactMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContactMessage",
      "type": "object",
      "description": "Represents a message submitted through the contact form.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ContactMessage entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the sender."
        },
        "email": {
          "type": "string",
          "description": "Email address of the sender.",
          "format": "email"
        },
        "message": {
          "type": "string",
          "description": "The message content."
        },
        "sentAt": {
          "type": "string",
          "description": "Timestamp when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "sentAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/about/{aboutId}",
        "definition": {
          "entityName": "About",
          "schema": {
            "$ref": "#/backend/entities/About"
          },
          "description": "Stores the 'About' section content. Only admins can create, update, or delete. There will only be one About document, aboutId is fixed.",
          "params": [
            {
              "name": "aboutId",
              "description": "The unique identifier for the about document. Only one document should exist and it's id should be constant, such as 'main'."
            }
          ]
        }
      },
      {
        "path": "/projects/{projectId}",
        "definition": {
          "entityName": "Project",
          "schema": {
            "$ref": "#/backend/entities/Project"
          },
          "description": "Stores project documents. Only admins can create, update, or delete.",
          "params": [
            {
              "name": "projectId",
              "description": "The unique identifier for the project."
            }
          ]
        }
      },
      {
        "path": "/resumeEntries/{resumeEntryId}",
        "definition": {
          "entityName": "ResumeEntry",
          "schema": {
            "$ref": "#/backend/entities/ResumeEntry"
          },
          "description": "Stores resume entries. Only admins can create, update, or delete.",
          "params": [
            {
              "name": "resumeEntryId",
              "description": "The unique identifier for the resume entry."
            }
          ]
        }
      },
      {
        "path": "/contactMessages/{contactMessageId}",
        "definition": {
          "entityName": "ContactMessage",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Stores contact messages submitted through the contact form. Only admins can list or read these messages.",
          "params": [
            {
              "name": "contactMessageId",
              "description": "The unique identifier for the contact message."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "roles_admin",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Presence-based role assignment. If a document exists for a user ID, that user is an admin. The content of this document is not relevant, only its existence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to manage content for a personal portfolio website, focusing on simplicity, security, and scalability. It includes collections for 'About' information, 'Projects', 'Resume Entries', and 'Contact Messages'. A separate collection manages admin roles to gate access to content modification. This design adheres to the core principles of Authorization Independence, Clarity of Intent, DBAC, and QAPs. Authorization Independence is achieved by avoiding hierarchical `get()` calls in security rules, relying instead on path-based ownership and role checks. Segregation ensures that each collection has a clear security posture. \n\nSpecifically:\n\n*   `/about`: Stores a single document with the 'About' information. Security rules ensure only admins can modify it.\n*   `/projects`: Stores project documents. Security rules ensure only admins can create, update, or delete projects.\n*   `/resumeEntries`: Stores resume entries. Security rules ensure only admins can create, update, or delete resume entries.\n*   `/contactMessages`: Stores contact messages submitted through the contact form. Only admins can list or read these messages.\n*   `/roles_admin/{uid}`: Presence-based role assignment. If a document exists for a user ID, that user is an admin.\n\nThis structure supports the QAPs (Rules Are Not Filters) by ensuring that list operations are secured through role-based access control. Admins can list all documents in the 'projects', 'resumeEntries', and 'contactMessages' collections, while regular users cannot list any of these collections. Read access to 'about' can be configured based on the desired level of public visibility."
  }
}